
Radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000212c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b0  080024b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  080024c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080024c4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002201  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dd2  00000000  00000000  00022236  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000420  00000000  00000000  00023008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000328  00000000  00000000  00023428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000941  00000000  00000000  00023750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000162b  00000000  00000000  00024091  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005532  00000000  00000000  000256bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002abee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e68  00000000  00000000  0002ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002244 	.word	0x08002244

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08002244 	.word	0x08002244

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <MGPIO_VidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"



void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d03e      	beq.n	80009e2 <MGPIO_VidSetPinDirection+0x96>
 8000964:	2b02      	cmp	r3, #2
 8000966:	d075      	beq.n	8000a54 <MGPIO_VidSetPinDirection+0x108>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d000      	beq.n	800096e <MGPIO_VidSetPinDirection+0x22>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 800096c:	e0b0      	b.n	8000ad0 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	2b07      	cmp	r3, #7
 8000972:	d817      	bhi.n	80009a4 <MGPIO_VidSetPinDirection+0x58>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8000974:	4b59      	ldr	r3, [pc, #356]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	210f      	movs	r1, #15
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a55      	ldr	r2, [pc, #340]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 8000988:	400b      	ands	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	7979      	ldrb	r1, [r7, #5]
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4a4f      	ldr	r2, [pc, #316]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 800099e:	430b      	orrs	r3, r1
 80009a0:	6013      	str	r3, [r2, #0]
		break;
 80009a2:	e090      	b.n	8000ac6 <MGPIO_VidSetPinDirection+0x17a>
		}else if(Copy_u8Pin <=15 ){//high
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	f200 808d 	bhi.w	8000ac6 <MGPIO_VidSetPinDirection+0x17a>
			Copy_u8Pin = Copy_u8Pin - 8;
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	3b08      	subs	r3, #8
 80009b0:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80009b2:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	79ba      	ldrb	r2, [r7, #6]
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	210f      	movs	r1, #15
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a45      	ldr	r2, [pc, #276]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 80009c6:	400b      	ands	r3, r1
 80009c8:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80009ca:	4b44      	ldr	r3, [pc, #272]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	7979      	ldrb	r1, [r7, #5]
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <MGPIO_VidSetPinDirection+0x190>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6053      	str	r3, [r2, #4]
		break;
 80009e0:	e071      	b.n	8000ac6 <MGPIO_VidSetPinDirection+0x17a>
		if(Copy_u8Pin <= 7 ){//low
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	d817      	bhi.n	8000a18 <MGPIO_VidSetPinDirection+0xcc>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	79ba      	ldrb	r2, [r7, #6]
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	210f      	movs	r1, #15
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 80009fc:	400b      	ands	r3, r1
 80009fe:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	7979      	ldrb	r1, [r7, #5]
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4a33      	ldr	r2, [pc, #204]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6013      	str	r3, [r2, #0]
		break;
 8000a16:	e058      	b.n	8000aca <MGPIO_VidSetPinDirection+0x17e>
		}else if(Copy_u8Pin <=15 ){//high
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d855      	bhi.n	8000aca <MGPIO_VidSetPinDirection+0x17e>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	3b08      	subs	r3, #8
 8000a22:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	43d2      	mvns	r2, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a38:	400b      	ands	r3, r1
 8000a3a:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	7979      	ldrb	r1, [r7, #5]
 8000a42:	79ba      	ldrb	r2, [r7, #6]
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <MGPIO_VidSetPinDirection+0x194>)
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	6053      	str	r3, [r2, #4]
		break;
 8000a52:	e03a      	b.n	8000aca <MGPIO_VidSetPinDirection+0x17e>
		if(Copy_u8Pin <= 7 ){//low
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d817      	bhi.n	8000a8a <MGPIO_VidSetPinDirection+0x13e>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	210f      	movs	r1, #15
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000a6e:	400b      	ands	r3, r1
 8000a70:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	7979      	ldrb	r1, [r7, #5]
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
		break;
 8000a88:	e021      	b.n	8000ace <MGPIO_VidSetPinDirection+0x182>
		}else if(Copy_u8Pin <=15 ){//high
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d81e      	bhi.n	8000ace <MGPIO_VidSetPinDirection+0x182>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	3b08      	subs	r3, #8
 8000a94:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	79ba      	ldrb	r2, [r7, #6]
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000aaa:	400b      	ands	r3, r1
 8000aac:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	7979      	ldrb	r1, [r7, #5]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <MGPIO_VidSetPinDirection+0x198>)
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6053      	str	r3, [r2, #4]
		break;
 8000ac4:	e003      	b.n	8000ace <MGPIO_VidSetPinDirection+0x182>
		break;
 8000ac6:	bf00      	nop
 8000ac8:	e002      	b.n	8000ad0 <MGPIO_VidSetPinDirection+0x184>
		break;
 8000aca:	bf00      	nop
 8000acc:	e000      	b.n	8000ad0 <MGPIO_VidSetPinDirection+0x184>
		break;
 8000ace:	bf00      	nop
	}

}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	460b      	mov	r3, r1
 8000af4:	71bb      	strb	r3, [r7, #6]
 8000af6:	4613      	mov	r3, r2
 8000af8:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d021      	beq.n	8000b44 <MGPIO_VidSetPinValue+0x5c>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d03c      	beq.n	8000b7e <MGPIO_VidSetPinValue+0x96>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d000      	beq.n	8000b0a <MGPIO_VidSetPinValue+0x22>

		break;

	}

}
 8000b08:	e05b      	b.n	8000bc2 <MGPIO_VidSetPinValue+0xda>
		if( u8Copy_u8Value == HIGH ){
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10a      	bne.n	8000b26 <MGPIO_VidSetPinValue+0x3e>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MGPIO_VidSetPinValue+0xe4>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <MGPIO_VidSetPinValue+0xe4>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
		break;
 8000b24:	e048      	b.n	8000bb8 <MGPIO_VidSetPinValue+0xd0>
		}else if( u8Copy_u8Value == LOW ){
 8000b26:	797b      	ldrb	r3, [r7, #5]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d145      	bne.n	8000bb8 <MGPIO_VidSetPinValue+0xd0>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <MGPIO_VidSetPinValue+0xe4>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	43d2      	mvns	r2, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <MGPIO_VidSetPinValue+0xe4>)
 8000b3e:	400b      	ands	r3, r1
 8000b40:	60d3      	str	r3, [r2, #12]
		break;
 8000b42:	e039      	b.n	8000bb8 <MGPIO_VidSetPinValue+0xd0>
		if( u8Copy_u8Value == HIGH ){
 8000b44:	797b      	ldrb	r3, [r7, #5]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d10a      	bne.n	8000b60 <MGPIO_VidSetPinValue+0x78>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MGPIO_VidSetPinValue+0xe8>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	2101      	movs	r1, #1
 8000b52:	fa01 f202 	lsl.w	r2, r1, r2
 8000b56:	4611      	mov	r1, r2
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <MGPIO_VidSetPinValue+0xe8>)
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	60d3      	str	r3, [r2, #12]
		break;
 8000b5e:	e02d      	b.n	8000bbc <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 8000b60:	797b      	ldrb	r3, [r7, #5]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d12a      	bne.n	8000bbc <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MGPIO_VidSetPinValue+0xe8>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	43d2      	mvns	r2, r2
 8000b74:	4611      	mov	r1, r2
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <MGPIO_VidSetPinValue+0xe8>)
 8000b78:	400b      	ands	r3, r1
 8000b7a:	60d3      	str	r3, [r2, #12]
		break;
 8000b7c:	e01e      	b.n	8000bbc <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10a      	bne.n	8000b9a <MGPIO_VidSetPinValue+0xb2>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MGPIO_VidSetPinValue+0xec>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	79ba      	ldrb	r2, [r7, #6]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <MGPIO_VidSetPinValue+0xec>)
 8000b94:	430b      	orrs	r3, r1
 8000b96:	60d3      	str	r3, [r2, #12]
		break;
 8000b98:	e012      	b.n	8000bc0 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10f      	bne.n	8000bc0 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MGPIO_VidSetPinValue+0xec>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	79ba      	ldrb	r2, [r7, #6]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <MGPIO_VidSetPinValue+0xec>)
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	60d3      	str	r3, [r2, #12]
		break;
 8000bb6:	e003      	b.n	8000bc0 <MGPIO_VidSetPinValue+0xd8>
		break;
 8000bb8:	bf00      	nop
 8000bba:	e002      	b.n	8000bc2 <MGPIO_VidSetPinValue+0xda>
		break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <MGPIO_VidSetPinValue+0xda>
		break;
 8000bc0:	bf00      	nop
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000

08000bd8 <DMA1_Channel1_IRQHandler>:

	DMA_CallBackChannel1 = Ptr ;

}

void DMA1_Channel1_IRQHandler(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	DMA_CallBackChannel1();
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4798      	blx	r3

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000003c 	.word	0x2000003c

08000bec <EXTI0_IRQHandler>:
{
		EXTI0_CallBack = ptr ;
}

void	EXTI0_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <EXTI0_IRQHandler+0x1c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4798      	blx	r3
	/*	Clear pending Bit		*/
	SET_BIT(EXTI -> PR , 0);
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <EXTI0_IRQHandler+0x20>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <EXTI0_IRQHandler+0x20>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6153      	str	r3, [r2, #20]
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000028 	.word	0x20000028
 8000c0c:	40010400 	.word	0x40010400

08000c10 <itoi>:





void itoi(u16 num, u8 *str, u16 base) {
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]
    u16 i = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	82fb      	strh	r3, [r7, #22]
    u16 isNegative = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	823b      	strh	r3, [r7, #16]

    // Handle 0 explicitly
    if (num == 0) {
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d12d      	bne.n	8000c8a <itoi+0x7a>
        str[i++] = '0';
 8000c2e:	8afb      	ldrh	r3, [r7, #22]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	82fa      	strh	r2, [r7, #22]
 8000c34:	461a      	mov	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8000c3e:	8afb      	ldrh	r3, [r7, #22]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
        return;
 8000c48:	e054      	b.n	8000cf4 <itoi+0xe4>
        num = -num;
    }

    // Process individual digits
    while (num != 0) {
        u16 rem = num % base;
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c52:	fb02 f201 	mul.w	r2, r2, r1
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	81bb      	strh	r3, [r7, #12]
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8000c5a:	89bb      	ldrh	r3, [r7, #12]
 8000c5c:	2b09      	cmp	r3, #9
 8000c5e:	d904      	bls.n	8000c6a <itoi+0x5a>
 8000c60:	89bb      	ldrh	r3, [r7, #12]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	3357      	adds	r3, #87	; 0x57
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	e003      	b.n	8000c72 <itoi+0x62>
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3330      	adds	r3, #48	; 0x30
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	8afa      	ldrh	r2, [r7, #22]
 8000c74:	1c51      	adds	r1, r2, #1
 8000c76:	82f9      	strh	r1, [r7, #22]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	440a      	add	r2, r1
 8000c7e:	7013      	strb	r3, [r2, #0]
        num = num / base;
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	80fb      	strh	r3, [r7, #6]
    while (num != 0) {
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1dc      	bne.n	8000c4a <itoi+0x3a>
    }

    // Add negative sign if the number was negative
    if (isNegative) {
 8000c90:	8a3b      	ldrh	r3, [r7, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <itoi+0x96>
        str[i++] = '-';
 8000c96:	8afb      	ldrh	r3, [r7, #22]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	82fa      	strh	r2, [r7, #22]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	222d      	movs	r2, #45	; 0x2d
 8000ca4:	701a      	strb	r2, [r3, #0]
    }

    // Append the null terminator to mark the end of the string
    str[i] = '\0';
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

    // Reverse the string to get the correct result
    u16 start = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	82bb      	strh	r3, [r7, #20]
    u16 end = i - 1;
 8000cb4:	8afb      	ldrh	r3, [r7, #22]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	827b      	strh	r3, [r7, #18]
    while (start < end) {
 8000cba:	e017      	b.n	8000cec <itoi+0xdc>
        char temp = str[start];
 8000cbc:	8abb      	ldrh	r3, [r7, #20]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	73fb      	strb	r3, [r7, #15]
        str[start] = str[end];
 8000cc6:	8a7b      	ldrh	r3, [r7, #18]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	441a      	add	r2, r3
 8000ccc:	8abb      	ldrh	r3, [r7, #20]
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	701a      	strb	r2, [r3, #0]
        start++;
 8000ce0:	8abb      	ldrh	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	82bb      	strh	r3, [r7, #20]
        end--;
 8000ce6:	8a7b      	ldrh	r3, [r7, #18]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	827b      	strh	r3, [r7, #18]
    while (start < end) {
 8000cec:	8aba      	ldrh	r2, [r7, #20]
 8000cee:	8a7b      	ldrh	r3, [r7, #18]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d3e3      	bcc.n	8000cbc <itoi+0xac>
    }
}
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <map>:



u32 map(u32 x, u32 in_min, u32 in_max, u32 out_min, u32 out_max) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
    // Calculate the mapped value
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	69b9      	ldr	r1, [r7, #24]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	fb02 f203 	mul.w	r2, r2, r3
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1acb      	subs	r3, r1, r3
 8000d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4413      	add	r3, r2
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
	...

08000d34 <HULTRA_attachPin>:
#include "HULTRA_private.h"
#include "HULTRA_config.h"


void HULTRA_attachPin(u8 Copy_u8TrigPort,u8 Copy_u8TrigPIN,u8 Copy_u8Echo)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
	MGPIO_VidSetPinDirection(Copy_u8TrigPort, Copy_u8TrigPIN, OUT_SPEED_2MHZ_PP) ;
 8000d46:	79b9      	ldrb	r1, [r7, #6]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fdfd 	bl	800094c <MGPIO_VidSetPinDirection>

	switch(Copy_u8Echo)
 8000d52:	797b      	ldrb	r3, [r7, #5]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d824      	bhi.n	8000da2 <HULTRA_attachPin+0x6e>
 8000d58:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HULTRA_attachPin+0x2c>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000d95 	.word	0x08000d95
	{
		case MTIMER3_CH1_PORTA_6:
			MGPIO_VidSetPinDirection(GPIOA,PIN6,INPUT_FLOATING);
 8000d70:	2204      	movs	r2, #4
 8000d72:	2106      	movs	r1, #6
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fde9 	bl	800094c <MGPIO_VidSetPinDirection>
			break;
 8000d7a:	e011      	b.n	8000da0 <HULTRA_attachPin+0x6c>

		case MTIMER3_CH2_PORTA_7:
			MGPIO_VidSetPinDirection(GPIOA,PIN7,INPUT_FLOATING);
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	2107      	movs	r1, #7
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fde3 	bl	800094c <MGPIO_VidSetPinDirection>
			break;
 8000d86:	e00b      	b.n	8000da0 <HULTRA_attachPin+0x6c>

		case MTIMER3_CH3_PORTB_0:
			MGPIO_VidSetPinDirection(GPIOB,PIN0,INPUT_FLOATING);
 8000d88:	2204      	movs	r2, #4
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fddd 	bl	800094c <MGPIO_VidSetPinDirection>
			break;
 8000d92:	e005      	b.n	8000da0 <HULTRA_attachPin+0x6c>

		case MTIMER3_CH4_PORTB_1:
			MGPIO_VidSetPinDirection(GPIOB,PIN1,INPUT_FLOATING);
 8000d94:	2204      	movs	r2, #4
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fdd7 	bl	800094c <MGPIO_VidSetPinDirection>
			break;
 8000d9e:	bf00      	nop
	}
	return;
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
}
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop

08000dac <HULTRA_Trig>:

void HULTRA_Trig(u8 Copy_u8Port,u8 Copy_u8Pin)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
	MGPIO_VidSetPinValue(Copy_u8Port, Copy_u8Pin, HIGH);
 8000dbc:	79b9      	ldrb	r1, [r7, #6]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe90 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MTIMER2_delay_us(10);
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f000 fc05 	bl	80015d8 <MTIMER2_delay_us>
	MGPIO_VidSetPinValue(Copy_u8Port, Copy_u8Pin, LOW);
 8000dce:	79b9      	ldrb	r1, [r7, #6]
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe87 	bl	8000ae8 <MGPIO_VidSetPinValue>
	return;
 8000dda:	bf00      	nop
}
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	0000      	movs	r0, r0
 8000de4:	0000      	movs	r0, r0
	...

08000de8 <HULTRA_Distance>:


u16 HULTRA_Distance(u8 Copy_u8Channel)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	u16 time = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	81fb      	strh	r3, [r7, #14]

	switch(Copy_u8Channel)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d87b      	bhi.n	8000ef4 <HULTRA_Distance+0x10c>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <HULTRA_Distance+0x1c>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e53 	.word	0x08000e53
 8000e0c:	08000e89 	.word	0x08000e89
 8000e10:	08000ebf 	.word	0x08000ebf
	{
		case MTIMER3_CH1_PORTA_6:
			time = MTIMER3_PWM_PulseIn(MTIMER3_CH1_PORTA_6,38000);
 8000e14:	f249 4170 	movw	r1, #38000	; 0x9470
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 fc6b 	bl	80016f4 <MTIMER3_PWM_PulseIn>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	81fb      	strh	r3, [r7, #14]
			MTIMER2_delay_us(60000);
 8000e22:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000e26:	f000 fbd7 	bl	80015d8 <MTIMER2_delay_us>
			return (u16)(0.034*(time/2));
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff faef 	bl	8000414 <__aeabi_i2d>
 8000e36:	a332      	add	r3, pc, #200	; (adr r3, 8000f00 <HULTRA_Distance+0x118>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fb54 	bl	80004e8 <__aeabi_dmul>
 8000e40:	4603      	mov	r3, r0
 8000e42:	460c      	mov	r4, r1
 8000e44:	4618      	mov	r0, r3
 8000e46:	4621      	mov	r1, r4
 8000e48:	f7ff fd60 	bl	800090c <__aeabi_d2uiz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	e051      	b.n	8000ef6 <HULTRA_Distance+0x10e>
			break;

		case MTIMER3_CH2_PORTA_7:
			time = MTIMER3_PWM_PulseIn(MTIMER3_CH2_PORTA_7,38000);
 8000e52:	f249 4170 	movw	r1, #38000	; 0x9470
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fc4c 	bl	80016f4 <MTIMER3_PWM_PulseIn>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	81fb      	strh	r3, [r7, #14]
			return (u16)(0.034*(time/2));
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fad4 	bl	8000414 <__aeabi_i2d>
 8000e6c:	a324      	add	r3, pc, #144	; (adr r3, 8000f00 <HULTRA_Distance+0x118>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fb39 	bl	80004e8 <__aeabi_dmul>
 8000e76:	4603      	mov	r3, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd45 	bl	800090c <__aeabi_d2uiz>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	e036      	b.n	8000ef6 <HULTRA_Distance+0x10e>
			break;

		case MTIMER3_CH3_PORTB_0:
			time = MTIMER3_PWM_PulseIn(MTIMER3_CH3_PORTB_0,38000);
 8000e88:	f249 4170 	movw	r1, #38000	; 0x9470
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fc31 	bl	80016f4 <MTIMER3_PWM_PulseIn>
 8000e92:	4603      	mov	r3, r0
 8000e94:	81fb      	strh	r3, [r7, #14]
			return (u16)(0.034*(time/2));
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	085b      	lsrs	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fab9 	bl	8000414 <__aeabi_i2d>
 8000ea2:	a317      	add	r3, pc, #92	; (adr r3, 8000f00 <HULTRA_Distance+0x118>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb1e 	bl	80004e8 <__aeabi_dmul>
 8000eac:	4603      	mov	r3, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	f7ff fd2a 	bl	800090c <__aeabi_d2uiz>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	e01b      	b.n	8000ef6 <HULTRA_Distance+0x10e>
			break;

		case MTIMER3_CH4_PORTB_1:
			time = MTIMER3_PWM_PulseIn(MTIMER3_CH4_PORTB_1,38000);
 8000ebe:	f249 4170 	movw	r1, #38000	; 0x9470
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 fc16 	bl	80016f4 <MTIMER3_PWM_PulseIn>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81fb      	strh	r3, [r7, #14]
			return (u16)(0.034*(time/2));
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa9e 	bl	8000414 <__aeabi_i2d>
 8000ed8:	a309      	add	r3, pc, #36	; (adr r3, 8000f00 <HULTRA_Distance+0x118>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fb03 	bl	80004e8 <__aeabi_dmul>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	4621      	mov	r1, r4
 8000eea:	f7ff fd0f 	bl	800090c <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	e000      	b.n	8000ef6 <HULTRA_Distance+0x10e>
			break;
	}

	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	bf00      	nop
 8000f00:	b020c49c 	.word	0xb020c49c
 8000f04:	3fa16872 	.word	0x3fa16872

08000f08 <HIR_u8GetPressedKey>:
{
    IR_CallBack = ptr;
}

u8 HIR_u8GetPressedKey(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
    u8 tempKey = u8Data;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HIR_u8GetPressedKey+0x20>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
    u8Data = NO_KEY_PRESSED;  // Clear the key after reading it
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HIR_u8GetPressedKey+0x20>)
 8000f16:	22ff      	movs	r2, #255	; 0xff
 8000f18:	701a      	strb	r2, [r3, #0]
    return tempKey;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000002c 	.word	0x2000002c

08000f2c <MRCC_VidInit>:
#include "RCC_private.h"
#include "RCC_config.h"



void MRCC_VidInit ( void ) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	
	#if 	RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
	
			RCC_CR = 0x00010000	;		
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MRCC_VidInit+0x28>)
 8000f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f36:	601a      	str	r2, [r3, #0]
			RCC_CFGR =0x00000001 ;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MRCC_VidInit+0x2c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
	#if CLOCK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM

			SET_BIT(RCC_CR , 19 ) ; 
	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

			CLR_BIT(RCC_CR , 19 ) ; 
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <MRCC_VidInit+0x28>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <MRCC_VidInit+0x28>)
 8000f44:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f48:	6013      	str	r3, [r2, #0]
	#else

		#warning " Wrong Clock Security System Configuration Choice "

	#endif
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40021004 	.word	0x40021004

08000f5c <MRCC_VidEnablePeripheralClock>:





void MRCC_VidEnablePeripheralClock (u8 Copy_u8BusID , u8 Copy_u8Peripheral){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	
	if (Copy_u8Peripheral <=31 )
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	2b1f      	cmp	r3, #31
 8000f70:	d828      	bhi.n	8000fc4 <MRCC_VidEnablePeripheralClock+0x68>
	{
		
		switch (Copy_u8BusID)
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d00f      	beq.n	8000f98 <MRCC_VidEnablePeripheralClock+0x3c>
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d018      	beq.n	8000fae <MRCC_VidEnablePeripheralClock+0x52>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d000      	beq.n	8000f82 <MRCC_VidEnablePeripheralClock+0x26>
	{
		/* Return Error */ 
		
	}		
	
}
 8000f80:	e020      	b.n	8000fc4 <MRCC_VidEnablePeripheralClock+0x68>
			case RCC_AHB   :	SET_BIT(RCC_AHBENR  , Copy_u8Peripheral ) ; break ;  
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MRCC_VidEnablePeripheralClock+0x74>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MRCC_VidEnablePeripheralClock+0x74>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e015      	b.n	8000fc4 <MRCC_VidEnablePeripheralClock+0x68>
			case RCC_APB1  :	SET_BIT(RCC_APB1ENR , Copy_u8Peripheral ) ; break ;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	79ba      	ldrb	r2, [r7, #6]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MRCC_VidEnablePeripheralClock+0x78>)
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e00a      	b.n	8000fc4 <MRCC_VidEnablePeripheralClock+0x68>
			case RCC_APB2  :	SET_BIT(RCC_APB2ENR , Copy_u8Peripheral ) ; break ;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MRCC_VidEnablePeripheralClock+0x7c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	79ba      	ldrb	r2, [r7, #6]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <MRCC_VidEnablePeripheralClock+0x7c>)
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	bf00      	nop
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021014 	.word	0x40021014
 8000fd4:	4002101c 	.word	0x4002101c
 8000fd8:	40021018 	.word	0x40021018

08000fdc <MSPI1_voidInit>:
#include "SPI_private.h"

void (*MSPI1_CallBack)(u8);

void MSPI1_voidInit(void)  
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	/* 0000 1011 0100 0111 */ 
	MSPI1->CR1 = 0x0347;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <MSPI1_voidInit+0x14>)
 8000fe2:	f240 3247 	movw	r2, #839	; 0x347
 8000fe6:	601a      	str	r2, [r3, #0]
	
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <MSPI1_voidSendReciveSynch>:


void MSPI1_voidSendReciveSynch(u8 Copy_u8DataToTransmit , u8 *Copy_DataToReceive )    // return after job finish 
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
	MGPIO_VidSetPinValue (MSPI1_SLAVE_PIN , LOW ) ;
 8001000:	2200      	movs	r2, #0
 8001002:	210a      	movs	r1, #10
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fd6f 	bl	8000ae8 <MGPIO_VidSetPinValue>
	
	 /* send Data */ 
	MSPI1->DR = Copy_u8DataToTransmit ; 
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MSPI1_voidSendReciveSynch+0x48>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	60d3      	str	r3, [r2, #12]
	
	/* Wait Busy Flag */ 
	while (GET_BIT(MSPI1->SR , 7) == 1) ;
 8001010:	bf00      	nop
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MSPI1_voidSendReciveSynch+0x48>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	09db      	lsrs	r3, r3, #7
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d0f8      	beq.n	8001012 <MSPI1_voidSendReciveSynch+0x1e>
	
	/* Receive Data */ 
	
	*Copy_DataToReceive = MSPI1->DR  ; 
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MSPI1_voidSendReciveSynch+0x48>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	701a      	strb	r2, [r3, #0]
	
	
	MGPIO_VidSetPinValue (MSPI1_SLAVE_PIN , HIGH ) ;
 800102a:	2201      	movs	r2, #1
 800102c:	210a      	movs	r1, #10
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fd5a 	bl	8000ae8 <MGPIO_VidSetPinValue>

}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000

08001040 <SPI1_IRQHandler>:
}


// SPI1 interrupt handler
void SPI1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    u8 ReceivedData;

    // Check if data is received
    if (GET_BIT(MSPI1->SR, 0)) // RXNE flag
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <SPI1_IRQHandler+0x40>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d012      	beq.n	8001078 <SPI1_IRQHandler+0x38>
    {
        // Read received data
        ReceivedData = MSPI1->DR;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <SPI1_IRQHandler+0x40>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	71fb      	strb	r3, [r7, #7]

        // Call the callback function with the received data
        MSPI1_CallBack(ReceivedData);
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SPI1_IRQHandler+0x44>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	4610      	mov	r0, r2
 8001060:	4798      	blx	r3

        // Set the slave select pin high to end the transmission
        MGPIO_VidSetPinValue(MSPI1_SLAVE_PIN, HIGH);
 8001062:	2201      	movs	r2, #1
 8001064:	210a      	movs	r1, #10
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fd3e 	bl	8000ae8 <MGPIO_VidSetPinValue>

        // Clear RXNE flag
        CLR_BIT(MSPI1->SR, 0); // RXNE flag
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SPI1_IRQHandler+0x40>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <SPI1_IRQHandler+0x40>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6093      	str	r3, [r2, #8]
    }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013000 	.word	0x40013000
 8001084:	20000040 	.word	0x20000040

08001088 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <MSTK_voidInit+0x14>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

#endif
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 80010ba:	bf00      	nop
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0c1b      	lsrs	r3, r3, #16
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f8      	beq.n	80010bc <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <MSTK_voidSetBusyWait+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]

}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <SysTick_Handler+0x50>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d111      	bne.n	8001122 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <SysTick_Handler+0x54>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <SysTick_Handler+0x54>)
 8001104:	f023 0302 	bic.w	r3, r3, #2
 8001108:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <SysTick_Handler+0x54>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <SysTick_Handler+0x54>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <SysTick_Handler+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <SysTick_Handler+0x54>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <SysTick_Handler+0x58>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SysTick_Handler+0x54>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0c1b      	lsrs	r3, r3, #16
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000034 	.word	0x20000034
 8001144:	e000e010 	.word	0xe000e010
 8001148:	20000030 	.word	0x20000030

0800114c <HTFT_voidInit>:
#include "TFT_private.h"



void HTFT_voidInit (void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0


	MGPIO_VidSetPinDirection(TFT_A0_PIN,OUT_SPEED_2MHZ_PP);  /* A0   */
 8001150:	2202      	movs	r2, #2
 8001152:	2102      	movs	r1, #2
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fbf9 	bl	800094c <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(TFT_RST_PIN,OUT_SPEED_2MHZ_PP);  /* RST  */
 800115a:	2202      	movs	r2, #2
 800115c:	2101      	movs	r1, #1
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fbf4 	bl	800094c <MGPIO_VidSetPinDirection>
	/* Reset pulse */
	MGPIO_VidSetPinValue(TFT_RST_PIN, HIGH);
 8001164:	2201      	movs	r2, #1
 8001166:	2101      	movs	r1, #1
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fcbd 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MSTK_voidSetBusyWait(100) ;
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f7ff ff96 	bl	80010a0 <MSTK_voidSetBusyWait>
	MGPIO_VidSetPinValue(TFT_RST_PIN, LOW);
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fcb5 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MSTK_voidSetBusyWait(2) ;
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff ff8e 	bl	80010a0 <MSTK_voidSetBusyWait>
	MGPIO_VidSetPinValue(TFT_RST_PIN, HIGH);
 8001184:	2201      	movs	r2, #1
 8001186:	2101      	movs	r1, #1
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fcad 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MSTK_voidSetBusyWait(100) ;
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f7ff ff86 	bl	80010a0 <MSTK_voidSetBusyWait>
	MGPIO_VidSetPinValue(TFT_RST_PIN, LOW);
 8001194:	2200      	movs	r2, #0
 8001196:	2101      	movs	r1, #1
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fca5 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MSTK_voidSetBusyWait(100) ;
 800119e:	2064      	movs	r0, #100	; 0x64
 80011a0:	f7ff ff7e 	bl	80010a0 <MSTK_voidSetBusyWait>
	MGPIO_VidSetPinValue(TFT_RST_PIN, HIGH);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2101      	movs	r1, #1
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fc9d 	bl	8000ae8 <MGPIO_VidSetPinValue>
	MSTK_voidSetBusyWait(120000) ;
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <HTFT_voidInit+0x8c>)
 80011b0:	f7ff ff76 	bl	80010a0 <MSTK_voidSetBusyWait>

	/* SLPOT  COMMAND */

	voidWriteCommand(0x11) ;
 80011b4:	2011      	movs	r0, #17
 80011b6:	f000 f938 	bl	800142a <voidWriteCommand>
	/* wait 150 msec */
	MSTK_voidSetBusyWait(150000) ;
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <HTFT_voidInit+0x90>)
 80011bc:	f7ff ff70 	bl	80010a0 <MSTK_voidSetBusyWait>
	/* color mode Command + paramter */
	voidWriteCommand(0x3A) ;
 80011c0:	203a      	movs	r0, #58	; 0x3a
 80011c2:	f000 f932 	bl	800142a <voidWriteCommand>
	voidWriteData(0x05);
 80011c6:	2005      	movs	r0, #5
 80011c8:	f000 f944 	bl	8001454 <voidWriteData>
	/* Display on command */
	voidWriteCommand(0x29) ;
 80011cc:	2029      	movs	r0, #41	; 0x29
 80011ce:	f000 f92c 	bl	800142a <voidWriteCommand>


}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0001d4c0 	.word	0x0001d4c0
 80011dc:	000249f0 	.word	0x000249f0

080011e0 <HTFT_voidFillDisplay>:




void HTFT_voidFillDisplay (u16 copy_u16Colour)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
	HTFT_voidDrawRectangle(0 , 0 ,TFT_MAX_X+1 , TFT_MAX_Y+1 , copy_u16Colour);
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	23a0      	movs	r3, #160	; 0xa0
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	2100      	movs	r1, #0
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f804 	bl	8001202 <HTFT_voidDrawRectangle>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HTFT_voidDrawRectangle>:


void HTFT_voidDrawRectangle (u16 copy_u16X ,u16 copy_u16Y , u16 copy_u16Width , u16 copy_u16Hight , u16 copy_u16Color )
{
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4623      	mov	r3, r4
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	4603      	mov	r3, r0
 8001216:	80bb      	strh	r3, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	803b      	strh	r3, [r7, #0]

	u16 loacal_u16EndX = copy_u16X + copy_u16Width - 1;
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	4413      	add	r3, r2
 8001226:	b29b      	uxth	r3, r3
 8001228:	3b01      	subs	r3, #1
 800122a:	81bb      	strh	r3, [r7, #12]
	u16 loacal_u16EndY = copy_u16Y + copy_u16Hight - 1;
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	883b      	ldrh	r3, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	817b      	strh	r3, [r7, #10]

	/* Set area of addresses */
	voidSetAddress(copy_u16X ,loacal_u16EndX,copy_u16Y ,loacal_u16EndY );
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	88ba      	ldrh	r2, [r7, #4]
 800123c:	89b9      	ldrh	r1, [r7, #12]
 800123e:	88f8      	ldrh	r0, [r7, #6]
 8001240:	f000 f93e 	bl	80014c0 <voidSetAddress>

	/* Draw the Rectangle*/
	for (u16 i = 0 ; i < (copy_u16Width *copy_u16Hight ) ; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e006      	b.n	8001258 <HTFT_voidDrawRectangle+0x56>
		voidSetColour(copy_u16Color);
 800124a:	8c3b      	ldrh	r3, [r7, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f989 	bl	8001564 <voidSetColour>
	for (u16 i = 0 ; i < (copy_u16Width *copy_u16Hight ) ; i++){
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	3301      	adds	r3, #1
 8001256:	81fb      	strh	r3, [r7, #14]
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	8839      	ldrh	r1, [r7, #0]
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf1      	blt.n	800124a <HTFT_voidDrawRectangle+0x48>
	}

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
	...

08001270 <HTFT_voidPrintChar>:



void HTFT_voidPrintChar(s8 copy_s8Char , u16 copy_u16X , u16 copy_u16Y, u8 copy_u8Size , u16 copy_u16Color, u16 copy_u16BackColor)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b087      	sub	sp, #28
 8001274:	af02      	add	r7, sp, #8
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4623      	mov	r3, r4
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	4603      	mov	r3, r0
 8001284:	80bb      	strh	r3, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]
 800128a:	4613      	mov	r3, r2
 800128c:	71bb      	strb	r3, [r7, #6]

	/* Get array index */
	u8 local_u8CharIndex = 0 ;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	if (( copy_s8Char >= ' ' )){
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b1f      	cmp	r3, #31
 8001298:	dd02      	ble.n	80012a0 <HTFT_voidPrintChar+0x30>
		local_u8CharIndex = copy_s8Char - 32 ;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	3b20      	subs	r3, #32
 800129e:	73fb      	strb	r3, [r7, #15]
	}

	/* Background */
	HTFT_voidDrawRectangle( copy_u16X, copy_u16Y ,copy_u8Size*TFT_CHARACTER_WIDTH ,copy_u8Size*TFT_CHARACTER_HIGHT ,copy_u16BackColor);
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	0052      	lsls	r2, r2, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	b29c      	uxth	r4, r3
 80012b6:	8879      	ldrh	r1, [r7, #2]
 80012b8:	88b8      	ldrh	r0, [r7, #4]
 80012ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4623      	mov	r3, r4
 80012c0:	f7ff ff9f 	bl	8001202 <HTFT_voidDrawRectangle>

	for (u8 i = 0; i <TFT_CHARACTER_WIDTH ; i++ ){
 80012c4:	2300      	movs	r3, #0
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	e04e      	b.n	8001368 <HTFT_voidPrintChar+0xf8>
		for (u8 j = 0 ; j <TFT_CHARACTER_HIGHT ; j++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	737b      	strb	r3, [r7, #13]
 80012ce:	e045      	b.n	800135c <HTFT_voidPrintChar+0xec>
			if (TFT_font[local_u8CharIndex][i] & (1 << j)){
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	7bb9      	ldrb	r1, [r7, #14]
 80012d4:	4828      	ldr	r0, [pc, #160]	; (8001378 <HTFT_voidPrintChar+0x108>)
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4403      	add	r3, r0
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	fa42 f303 	asr.w	r3, r2, r3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d030      	beq.n	8001356 <HTFT_voidPrintChar+0xe6>
				if (copy_u8Size == 1){
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10e      	bne.n	8001318 <HTFT_voidPrintChar+0xa8>
					voidDrawPixel(copy_u16X+i , copy_u16Y+j , copy_u16Color);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	b298      	uxth	r0, r3
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	b29a      	uxth	r2, r3
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	8c3a      	ldrh	r2, [r7, #32]
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f8b4 	bl	800147e <voidDrawPixel>
 8001316:	e01e      	b.n	8001356 <HTFT_voidPrintChar+0xe6>
				}
				else {
					u16 local_x = copy_u16X+(i*copy_u8Size) ;
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	b29b      	uxth	r3, r3
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	b292      	uxth	r2, r2
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	b29a      	uxth	r2, r3
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	817b      	strh	r3, [r7, #10]
					u16 local_y = copy_u16Y+(j*copy_u8Size) ;
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	b29b      	uxth	r3, r3
 8001330:	79ba      	ldrb	r2, [r7, #6]
 8001332:	b292      	uxth	r2, r2
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	b29a      	uxth	r2, r3
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	4413      	add	r3, r2
 800133e:	813b      	strh	r3, [r7, #8]
					HTFT_voidDrawRectangle( local_x, local_y ,copy_u8Size ,copy_u8Size ,copy_u16Color);
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	b29a      	uxth	r2, r3
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	b29c      	uxth	r4, r3
 8001348:	8939      	ldrh	r1, [r7, #8]
 800134a:	8978      	ldrh	r0, [r7, #10]
 800134c:	8c3b      	ldrh	r3, [r7, #32]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4623      	mov	r3, r4
 8001352:	f7ff ff56 	bl	8001202 <HTFT_voidDrawRectangle>
		for (u8 j = 0 ; j <TFT_CHARACTER_HIGHT ; j++){
 8001356:	7b7b      	ldrb	r3, [r7, #13]
 8001358:	3301      	adds	r3, #1
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	7b7b      	ldrb	r3, [r7, #13]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d9b6      	bls.n	80012d0 <HTFT_voidPrintChar+0x60>
	for (u8 i = 0; i <TFT_CHARACTER_WIDTH ; i++ ){
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	3301      	adds	r3, #1
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d9ad      	bls.n	80012ca <HTFT_voidPrintChar+0x5a>
				}
			}
		}
	}
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	08002270 	.word	0x08002270

0800137c <HTFT_voidPrintText>:

void HTFT_voidPrintText(s8 *copy_s8Text , u16 copy_u16X , u16 copy_u16Y, u8 copy_u8Size , u16 copy_u16Color, u16 copy_u16BackColor)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b087      	sub	sp, #28
 8001380:	af02      	add	r7, sp, #8
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4603      	mov	r3, r0
 800138c:	817b      	strh	r3, [r7, #10]
 800138e:	460b      	mov	r3, r1
 8001390:	813b      	strh	r3, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	71fb      	strb	r3, [r7, #7]
	while (*copy_s8Text){
 8001396:	e019      	b.n	80013cc <HTFT_voidPrintText+0x50>
			HTFT_voidPrintChar(*copy_s8Text , copy_u16X ,copy_u16Y ,copy_u8Size ,copy_u16Color,copy_u16BackColor );
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f993 0000 	ldrsb.w	r0, [r3]
 800139e:	79fc      	ldrb	r4, [r7, #7]
 80013a0:	893a      	ldrh	r2, [r7, #8]
 80013a2:	8979      	ldrh	r1, [r7, #10]
 80013a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4623      	mov	r3, r4
 80013ae:	f7ff ff5f 	bl	8001270 <HTFT_voidPrintChar>
			copy_u16X += (copy_u8Size *TFT_CHARACTER_WIDTH)  ;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	0052      	lsls	r2, r2, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	897b      	ldrh	r3, [r7, #10]
 80013c2:	4413      	add	r3, r2
 80013c4:	817b      	strh	r3, [r7, #10]
			copy_s8Text++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
	while (*copy_s8Text){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1e0      	bne.n	8001398 <HTFT_voidPrintText+0x1c>
		}
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}

080013de <HTFT_voidprintNumber>:




void HTFT_voidprintNumber(u16 Copy_u16Number , u16 copy_u16X, u16 copy_u16Y, u8 copy_u8Size, u16 copy_u16Color, u16 copy_u16BackColor) {
 80013de:	b590      	push	{r4, r7, lr}
 80013e0:	b089      	sub	sp, #36	; 0x24
 80013e2:	af02      	add	r7, sp, #8
 80013e4:	4604      	mov	r4, r0
 80013e6:	4608      	mov	r0, r1
 80013e8:	4611      	mov	r1, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4623      	mov	r3, r4
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4603      	mov	r3, r0
 80013f2:	80bb      	strh	r3, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
    u8 Local_u8Buffer[10]; // Buffer to hold the number as a string
    itoi(Copy_u16Number, Local_u8Buffer, 10); // Convert number to string in base 10
 80013fc:	f107 010c 	add.w	r1, r7, #12
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	220a      	movs	r2, #10
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc03 	bl	8000c10 <itoi>
    HTFT_voidPrintText(Local_u8Buffer, copy_u16X, copy_u16Y, copy_u8Size, copy_u16Color, copy_u16BackColor); // Print the text
 800140a:	787c      	ldrb	r4, [r7, #1]
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	88b9      	ldrh	r1, [r7, #4]
 8001410:	f107 000c 	add.w	r0, r7, #12
 8001414:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	4623      	mov	r3, r4
 800141e:	f7ff ffad 	bl	800137c <HTFT_voidPrintText>
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}

0800142a <voidWriteCommand>:



/////////////////////////////////////////////////////////////////////////////////////////////
static void voidWriteCommand (u8 Copy_u8Command )
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp ; 
	/* set pin A0 in TFT_Module Low */
	MGPIO_VidSetPinValue(TFT_A0_PIN, LOW);
 8001434:	2200      	movs	r2, #0
 8001436:	2102      	movs	r1, #2
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fb55 	bl	8000ae8 <MGPIO_VidSetPinValue>
	/* send Command  using SPI */
	MSPI1_voidSendReciveSynch(Copy_u8Command , &Local_u8Temp) ; 
 800143e:	f107 020f 	add.w	r2, r7, #15
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fdd4 	bl	8000ff4 <MSPI1_voidSendReciveSynch>


}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <voidWriteData>:


static void voidWriteData (u8 Copy_u8Data )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp ;
	/* set pin A0 in TFT_Module Low */
	MGPIO_VidSetPinValue(TFT_A0_PIN, HIGH);
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fb40 	bl	8000ae8 <MGPIO_VidSetPinValue>
	/* send Command  using SPI */
	MSPI1_voidSendReciveSynch(Copy_u8Data , &Local_u8Temp) ;
 8001468:	f107 020f 	add.w	r2, r7, #15
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fdbf 	bl	8000ff4 <MSPI1_voidSendReciveSynch>


}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <voidDrawPixel>:




static void voidDrawPixel (u16 copy_u16X , u16 copy_u16Y , u16 copy_u16Colour)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	460b      	mov	r3, r1
 800148a:	80bb      	strh	r3, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	807b      	strh	r3, [r7, #2]
	if ( (copy_u16X < TFT_MAX_X ) && (copy_u16Y < TFT_MAX_Y )){
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2b7e      	cmp	r3, #126	; 0x7e
 8001494:	d810      	bhi.n	80014b8 <voidDrawPixel+0x3a>
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	2b9e      	cmp	r3, #158	; 0x9e
 800149a:	d80d      	bhi.n	80014b8 <voidDrawPixel+0x3a>

		/* Set address of the pixel */
		voidSetAddress(copy_u16X  , copy_u16X+1 , copy_u16Y , copy_u16Y+1);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	3301      	adds	r3, #1
 80014a0:	b299      	uxth	r1, r3
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	88ba      	ldrh	r2, [r7, #4]
 80014aa:	88f8      	ldrh	r0, [r7, #6]
 80014ac:	f000 f808 	bl	80014c0 <voidSetAddress>

		/* Write pixel colour */
		voidSetColour(copy_u16Colour);
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f856 	bl	8001564 <voidSetColour>
	}
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <voidSetAddress>:




static void voidSetAddress (u16 copy_u16StartX ,u16 copy_u16EndX , u16 copy_u16StartY , u16 copy_u16EndY)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	803b      	strh	r3, [r7, #0]
	if ( (copy_u16StartX < TFT_MAX_X ) && (copy_u16StartY < TFT_MAX_Y )){
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b7e      	cmp	r3, #126	; 0x7e
 80014e2:	d83b      	bhi.n	800155c <voidSetAddress+0x9c>
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	2b9e      	cmp	r3, #158	; 0x9e
 80014e8:	d838      	bhi.n	800155c <voidSetAddress+0x9c>
		/* Set x Address */
		voidWriteCommand(0x2A);
 80014ea:	202a      	movs	r0, #42	; 0x2a
 80014ec:	f7ff ff9d 	bl	800142a <voidWriteCommand>
		/* Start byte */
		voidWriteData((copy_u16StartX >> 8));  // MS byte
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ffab 	bl	8001454 <voidWriteData>
		voidWriteData(copy_u16StartX);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ffa6 	bl	8001454 <voidWriteData>

		/* Stop byte */
		voidWriteData((copy_u16EndX >> 8));
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff9f 	bl	8001454 <voidWriteData>
		voidWriteData(copy_u16EndX);
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff9a 	bl	8001454 <voidWriteData>

		/* Set y Address */
		voidWriteCommand(0x2B);
 8001520:	202b      	movs	r0, #43	; 0x2b
 8001522:	f7ff ff82 	bl	800142a <voidWriteCommand>
		/* Start byte */
		voidWriteData((copy_u16StartY >> 8));  // MS byte
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff90 	bl	8001454 <voidWriteData>
		voidWriteData(copy_u16StartY);
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff8b 	bl	8001454 <voidWriteData>
		/* Stop byte */
		voidWriteData((copy_u16EndY >> 8));
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff84 	bl	8001454 <voidWriteData>
		voidWriteData(copy_u16EndY);
 800154c:	883b      	ldrh	r3, [r7, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff7f 	bl	8001454 <voidWriteData>

		/* RAM write */
		voidWriteCommand(0x2C);
 8001556:	202c      	movs	r0, #44	; 0x2c
 8001558:	f7ff ff67 	bl	800142a <voidWriteCommand>
	}
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <voidSetColour>:


static void voidSetColour(u16 copy_u16Colour)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]

	/* Write pixel */
	u8 high_byte = (copy_u16Colour >> 8);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	73fb      	strb	r3, [r7, #15]
	u8 low_byte = (copy_u16Colour & 0x00ff);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	73bb      	strb	r3, [r7, #14]
	voidWriteData(high_byte);
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff69 	bl	8001454 <voidWriteData>
	voidWriteData(low_byte);
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff65 	bl	8001454 <voidWriteData>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <MTIMER2_init>:




void MTIMER2_init(u8 Copy_u8Delay_type)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
	switch(Copy_u8Delay_type)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d002      	beq.n	80015a8 <MTIMER2_init+0x16>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d00a      	beq.n	80015bc <MTIMER2_init+0x2a>
		case delay_us:
			MTIMER2 -> PSC  = (u16)7;
			MTIMER2 -> CR1  = (u16)0x0088;
			break;
	}
	return;
 80015a6:	e013      	b.n	80015d0 <MTIMER2_init+0x3e>
			MTIMER2 -> PSC  = (u16)7999;
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
			MTIMER2 -> CR1  = (u16)0x0088;
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b6:	2288      	movs	r2, #136	; 0x88
 80015b8:	601a      	str	r2, [r3, #0]
			break;
 80015ba:	e008      	b.n	80015ce <MTIMER2_init+0x3c>
			MTIMER2 -> PSC  = (u16)7;
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	2207      	movs	r2, #7
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
			MTIMER2 -> CR1  = (u16)0x0088;
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c8:	2288      	movs	r2, #136	; 0x88
 80015ca:	601a      	str	r2, [r3, #0]
			break;
 80015cc:	bf00      	nop
	return;
 80015ce:	bf00      	nop
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <MTIMER2_delay_us>:
	CLR_BIT((MTIMER2 -> SR),SR_UIF);
	return;
}

void MTIMER2_delay_us(u16 Copy_u16Value)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	MTIMER2 -> ARR = Copy_u16Value;
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SET_BIT((MTIMER2 -> CR1),CR1_CEN);
 80015ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]
	while(GET_BIT((MTIMER2 -> SR),SR_UIF) == 0);
 80015fa:	bf00      	nop
 80015fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f8      	beq.n	80015fc <MTIMER2_delay_us+0x24>
	CLR_BIT((MTIMER2 -> SR),SR_UIF);
 800160a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6113      	str	r3, [r2, #16]
	return;
 800161a:	bf00      	nop
}
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <MTIMER3_init>:
#include "TIMER3_interface.h"
#include "TIMER3_private.h"
#include "TIMER3_config.h"


void MTIMER3_init(u8 mode) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    switch(mode) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b01      	subs	r3, #1
 8001632:	2b03      	cmp	r3, #3
 8001634:	d834      	bhi.n	80016a0 <MTIMER3_init+0x7c>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <MTIMER3_init+0x18>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800165d 	.word	0x0800165d
 8001644:	0800166b 	.word	0x0800166b
 8001648:	08001685 	.word	0x08001685
        case delay_ms:
            MTIMER3 -> PSC  = (u16)7999;   // Prescaler set for milliseconds delay
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MTIMER3_init+0x88>)
 800164e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3 -> CR1  = (u16)0x0088; // Configuring the timer
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MTIMER3_init+0x88>)
 8001656:	2288      	movs	r2, #136	; 0x88
 8001658:	601a      	str	r2, [r3, #0]
            break;
 800165a:	e020      	b.n	800169e <MTIMER3_init+0x7a>

        case delay_us:
            MTIMER3 -> PSC  = (u16)7;      // Prescaler set for microseconds delay
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MTIMER3_init+0x88>)
 800165e:	2207      	movs	r2, #7
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3 -> CR1  = (u16)0x0088; // Configuring the timer
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MTIMER3_init+0x88>)
 8001664:	2288      	movs	r2, #136	; 0x88
 8001666:	601a      	str	r2, [r3, #0]
            break;
 8001668:	e019      	b.n	800169e <MTIMER3_init+0x7a>

        case PWM_channel_1_us:
            MTIMER3 -> CR1   = (u16)0x0081; // Timer in upcounting mode, counter enabled
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MTIMER3_init+0x88>)
 800166c:	2281      	movs	r2, #129	; 0x81
 800166e:	601a      	str	r2, [r3, #0]
            MTIMER3 -> PSC   = (u16)7;      // Prescaler for PWM in microseconds
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MTIMER3_init+0x88>)
 8001672:	2207      	movs	r2, #7
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3 -> CCMR1 = (u16)0x0068; // PWM mode settings for channel 1
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MTIMER3_init+0x88>)
 8001678:	2268      	movs	r2, #104	; 0x68
 800167a:	619a      	str	r2, [r3, #24]
            MTIMER3 -> CCER  = (u16)0x0001; // Enable output on channel 1
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MTIMER3_init+0x88>)
 800167e:	2201      	movs	r2, #1
 8001680:	621a      	str	r2, [r3, #32]
            break;
 8001682:	e00c      	b.n	800169e <MTIMER3_init+0x7a>

        case PWM_channel_1_IN:
            MTIMER3 -> CR1   = (u16)0x0001; // Timer in upcounting mode, counter enabled
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MTIMER3_init+0x88>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
            MTIMER3 -> PSC   = (u16)7;      // Prescaler for input capture
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MTIMER3_init+0x88>)
 800168c:	2207      	movs	r2, #7
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
            MTIMER3 -> CCMR1 = (u16)0x0201; // Input capture settings for channel 1
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MTIMER3_init+0x88>)
 8001692:	f240 2201 	movw	r2, #513	; 0x201
 8001696:	619a      	str	r2, [r3, #24]
            MTIMER3 -> CCER  = (u16)0x0031; // Capture on both edges, enable channel 1
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <MTIMER3_init+0x88>)
 800169a:	2231      	movs	r2, #49	; 0x31
 800169c:	621a      	str	r2, [r3, #32]
    }
    return;
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
}
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40000400 	.word	0x40000400

080016b0 <MTIMER3_delay_ms>:


void MTIMER3_delay_ms(u16 value)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	MTIMER3 -> ARR = value;
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	62d3      	str	r3, [r2, #44]	; 0x2c
	SET_BIT((MTIMER3 -> CR1),CR1_CEN);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]
	while(GET_BIT((MTIMER3 -> SR),SR_UIF) == 0);
 80016cc:	bf00      	nop
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f9      	beq.n	80016ce <MTIMER3_delay_ms+0x1e>
	CLR_BIT((MTIMER3 -> SR),SR_UIF);
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <MTIMER3_delay_ms+0x40>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6113      	str	r3, [r2, #16]
	return;
 80016e6:	bf00      	nop
}
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40000400 	.word	0x40000400

080016f4 <MTIMER3_PWM_PulseIn>:

	return;
}

u16 MTIMER3_PWM_PulseIn(u8 channel,u16 CNT_value)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	460a      	mov	r2, r1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	80bb      	strh	r3, [r7, #4]
	u16 value = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	81fb      	strh	r3, [r7, #14]
	MTIMER3 -> ARR = CNT_value;
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	62d3      	str	r3, [r2, #44]	; 0x2c
	switch(channel)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b03      	cmp	r3, #3
 8001712:	f200 809f 	bhi.w	8001854 <MTIMER3_PWM_PulseIn+0x160>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <MTIMER3_PWM_PulseIn+0x28>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001777 	.word	0x08001777
 8001724:	080017c1 	.word	0x080017c1
 8001728:	0800180b 	.word	0x0800180b
	{
		case MTIMER3_CH1_PORTA_6:
			while(!(GET_BIT((MTIMER3 -> SR),1) && GET_BIT((MTIMER3 -> SR),2)));
 800172c:	bf00      	nop
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f8      	beq.n	800172e <MTIMER3_PWM_PulseIn+0x3a>
 800173c:	4b48      	ldr	r3, [pc, #288]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f1      	beq.n	800172e <MTIMER3_PWM_PulseIn+0x3a>
			CLR_BIT((MTIMER3 -> SR),1);
 800174a:	4b45      	ldr	r3, [pc, #276]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a44      	ldr	r2, [pc, #272]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	6113      	str	r3, [r2, #16]
			CLR_BIT((MTIMER3 -> SR),2);
 8001756:	4b42      	ldr	r3, [pc, #264]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	4a41      	ldr	r2, [pc, #260]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6113      	str	r3, [r2, #16]
			value = ((MTIMER3 -> CCR2)-(MTIMER3 -> CCR1));
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	b29b      	uxth	r3, r3
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	81fb      	strh	r3, [r7, #14]
			return value;
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	e06f      	b.n	8001856 <MTIMER3_PWM_PulseIn+0x162>
			break;

		case MTIMER3_CH2_PORTA_7:
			while(GET_BIT((MTIMER3 -> SR),1) && GET_BIT((MTIMER3 -> SR),2));
 8001776:	bf00      	nop
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <MTIMER3_PWM_PulseIn+0xa0>
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f1      	bne.n	8001778 <MTIMER3_PWM_PulseIn+0x84>
			CLR_BIT((MTIMER3 -> SR),1);
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800179a:	f023 0302 	bic.w	r3, r3, #2
 800179e:	6113      	str	r3, [r2, #16]
			CLR_BIT((MTIMER3 -> SR),2);
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6113      	str	r3, [r2, #16]
			value = ((MTIMER3 -> CCR1)-(MTIMER3 -> CCR2));
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	81fb      	strh	r3, [r7, #14]
			return value;
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	e04a      	b.n	8001856 <MTIMER3_PWM_PulseIn+0x162>
			break;

		case MTIMER3_CH3_PORTB_0:
			while(GET_BIT((MTIMER3 -> SR),3) && GET_BIT((MTIMER3 -> SR),4));
 80017c0:	bf00      	nop
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <MTIMER3_PWM_PulseIn+0xea>
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f1      	bne.n	80017c2 <MTIMER3_PWM_PulseIn+0xce>
			CLR_BIT((MTIMER3 -> SR),3);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017e4:	f023 0308 	bic.w	r3, r3, #8
 80017e8:	6113      	str	r3, [r2, #16]
			CLR_BIT((MTIMER3 -> SR),4);
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017f0:	f023 0310 	bic.w	r3, r3, #16
 80017f4:	6113      	str	r3, [r2, #16]
			value = ((MTIMER3 -> CCR3)-(MTIMER3 -> CCR4));
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	b29b      	uxth	r3, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	81fb      	strh	r3, [r7, #14]
			return value;
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	e025      	b.n	8001856 <MTIMER3_PWM_PulseIn+0x162>
			break;

		case MTIMER3_CH4_PORTB_1:
			while(GET_BIT((MTIMER3 -> SR),3) && GET_BIT((MTIMER3 -> SR),4));
 800180a:	bf00      	nop
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <MTIMER3_PWM_PulseIn+0x134>
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f1      	bne.n	800180c <MTIMER3_PWM_PulseIn+0x118>
			CLR_BIT((MTIMER3 -> SR),3);
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800182e:	f023 0308 	bic.w	r3, r3, #8
 8001832:	6113      	str	r3, [r2, #16]
			CLR_BIT((MTIMER3 -> SR),4);
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 800183a:	f023 0310 	bic.w	r3, r3, #16
 800183e:	6113      	str	r3, [r2, #16]
			value = ((MTIMER3 -> CCR3)-(MTIMER3 -> CCR4));
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MTIMER3_PWM_PulseIn+0x16c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	b29b      	uxth	r3, r3
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	81fb      	strh	r3, [r7, #14]
			return value;
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	e000      	b.n	8001856 <MTIMER3_PWM_PulseIn+0x162>
			break;

	}
	return value;
 8001854:	89fb      	ldrh	r3, [r7, #14]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40000400 	.word	0x40000400

08001864 <PWM_voidInit>:
#include "TIM_private.h"
#include "TIM_config.h"


void PWM_voidInit(sPWM_Confg_t *PWM_Config)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

	if (PWM_Config->TimerSelect ==PWM_TIMER1 ){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d104      	bne.n	800187e <PWM_voidInit+0x1a>
		/* Enable clock */
		MRCC_VidEnablePeripheralClock(RCC_APB2 , TIM1_RCC);
 8001874:	210b      	movs	r1, #11
 8001876:	2002      	movs	r0, #2
 8001878:	f7ff fb70 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
 800187c:	e003      	b.n	8001886 <PWM_voidInit+0x22>
	}
	else {

		MRCC_VidEnablePeripheralClock(RCC_APB2 , TIM8_RCC);
 800187e:	210d      	movs	r1, #13
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fb6b 	bl	8000f5c <MRCC_VidEnablePeripheralClock>

	}
	SET_BIT(TIMx[PWM_Config->TimerSelect]->CR1,7);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <PWM_voidInit+0x1f4>)
 800188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <PWM_voidInit+0x1f4>)
 800189c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a4:	601a      	str	r2, [r3, #0]
	/* Set counter direction as up-counter */
	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CR1,4);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018c0:	f022 0210 	bic.w	r2, r2, #16
 80018c4:	601a      	str	r2, [r3, #0]
	  /* Select master mode Compare */
	  /* Compare - OC1REF signal is used as trigger output (TRGO)  */
	SET_BIT(TIMx[PWM_Config->TimerSelect]->CR2,6);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e4:	605a      	str	r2, [r3, #4]
	SET_BIT(TIMx[PWM_Config->TimerSelect]->SMCR ,7);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <PWM_voidInit+0x1f4>)
 80018fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001904:	609a      	str	r2, [r3, #8]

  /* Set timer Prescaler, bus clock = 90 MHz, fCK_PSC / (PSC[15:0] + 1)
   * CK_CNT = F / (PSC+1) -> FREQ Hz -> time base = 1/FREQ */
  TIMx[PWM_Config->TimerSelect]->PSC = PWM_Config->Prescaler;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	885a      	ldrh	r2, [r3, #2]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
  /* Set timer auto reload value to maximum */
  TIMx[PWM_Config->TimerSelect]->ARR = PWM_Config->AutoReloadReg;;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	889a      	ldrh	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001924:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
	  /* Set duty cycle */
  TIMx[PWM_Config->TimerSelect]->CCR1 = 0x00;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001936:	2200      	movs	r2, #0
 8001938:	635a      	str	r2, [r3, #52]	; 0x34

	for (u8 i=0;i<4;i++){
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e11c      	b.n	8001b7a <PWM_voidInit+0x316>
		if (i <2){
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b01      	cmp	r3, #1
 8001944:	f200 808a 	bhi.w	8001a5c <PWM_voidInit+0x1f8>
		/* Set Capture/Compare  as output */
			CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(0+(i*8)));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <PWM_voidInit+0x1f4>)
 800196c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001970:	400a      	ands	r2, r1
 8001972:	619a      	str	r2, [r3, #24]
		/* Set Capture/Compare  as output */
			CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(1+(i*8)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <PWM_voidInit+0x1f4>)
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4619      	mov	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <PWM_voidInit+0x1f4>)
 800199a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800199e:	400a      	ands	r2, r1
 80019a0:	619a      	str	r2, [r3, #24]
		/* Output Compare  preload enable */
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(3+(i*8)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <PWM_voidInit+0x1f4>)
 80019aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	3303      	adds	r3, #3
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <PWM_voidInit+0x1f4>)
 80019c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	619a      	str	r2, [r3, #24]
		* TIMx_CNT >= TIMx_CCR1 -> Output Inactive
		* 110: PWM mode 1 - In upcounting,
		* channel 1 is active as long as TIMx_CNT<TIMx_CCR1
		* else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as */

		CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(4+(i*8)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <PWM_voidInit+0x1f4>)
 80019d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	3304      	adds	r3, #4
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <PWM_voidInit+0x1f4>)
 80019f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019f8:	400a      	ands	r2, r1
 80019fa:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(5+(i*8)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	3305      	adds	r3, #5
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001a20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR1,(6+(i*8)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	3306      	adds	r3, #6
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <PWM_voidInit+0x1f4>)
 8001a4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	e08e      	b.n	8001b74 <PWM_voidInit+0x310>
 8001a56:	bf00      	nop
 8001a58:	20000000 	.word	0x20000000
		}else
		{
		/* Set Capture/Compare  as output */
			CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(0+((i-2)*8)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b92      	ldr	r3, [pc, #584]	; (8001cac <PWM_voidInit+0x448>)
 8001a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	3b02      	subs	r3, #2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <PWM_voidInit+0x448>)
 8001a82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001a86:	400a      	ands	r2, r1
 8001a88:	61da      	str	r2, [r3, #28]
		/* Set Capture/Compare  as output */
			CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(1+((i-2)*8)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b86      	ldr	r3, [pc, #536]	; (8001cac <PWM_voidInit+0x448>)
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	69da      	ldr	r2, [r3, #28]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	3b02      	subs	r3, #2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <PWM_voidInit+0x448>)
 8001ab2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	61da      	str	r2, [r3, #28]
		/* Output Compare  preload enable */
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(3+((i-2)*8)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <PWM_voidInit+0x448>)
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	3b02      	subs	r3, #2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	3303      	adds	r3, #3
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	4b73      	ldr	r3, [pc, #460]	; (8001cac <PWM_voidInit+0x448>)
 8001ae0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	61da      	str	r2, [r3, #28]

		/* Select Output Compare  PWM mode 1
		* TIMx_CNT < TIMx_CCR1 -> Output Active
		* TIMx_CNT >= TIMx_CCR1 -> Output Inactive */
		CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(4+((i-2)*8)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <PWM_voidInit+0x448>)
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	3b02      	subs	r3, #2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	3304      	adds	r3, #4
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4b67      	ldr	r3, [pc, #412]	; (8001cac <PWM_voidInit+0x448>)
 8001b10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001b14:	400a      	ands	r2, r1
 8001b16:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(5+((i-2)*8)));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <PWM_voidInit+0x448>)
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	3305      	adds	r3, #5
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4619      	mov	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <PWM_voidInit+0x448>)
 8001b3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCMR2,(6+((i-2)*8)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b57      	ldr	r3, [pc, #348]	; (8001cac <PWM_voidInit+0x448>)
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	3b02      	subs	r3, #2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	4619      	mov	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4b50      	ldr	r3, [pc, #320]	; (8001cac <PWM_voidInit+0x448>)
 8001b6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	61da      	str	r2, [r3, #28]
	for (u8 i=0;i<4;i++){
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	3301      	adds	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	f67f aedf 	bls.w	8001940 <PWM_voidInit+0xdc>
		}
    }


	/* Select Capture/Compare 1 output polarity active high */
	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCER,1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <PWM_voidInit+0x448>)
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <PWM_voidInit+0x448>)
 8001b98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b9c:	f022 0202 	bic.w	r2, r2, #2
 8001ba0:	621a      	str	r2, [r3, #32]

	if (PWM_Config->CCR1_Status == CCR_ENABLE )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	799b      	ldrb	r3, [r3, #6]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d110      	bne.n	8001bcc <PWM_voidInit+0x368>
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCER,0); /* Enable Capture/Compare output */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <PWM_voidInit+0x448>)
 8001bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <PWM_voidInit+0x448>)
 8001bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	621a      	str	r2, [r3, #32]
 8001bca:	e00f      	b.n	8001bec <PWM_voidInit+0x388>
    else
    	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCER,0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <PWM_voidInit+0x448>)
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <PWM_voidInit+0x448>)
 8001be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	621a      	str	r2, [r3, #32]

	if (PWM_Config->CCR2_Status == CCR_ENABLE )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	79db      	ldrb	r3, [r3, #7]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d110      	bne.n	8001c16 <PWM_voidInit+0x3b2>
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCER,4); /* Enable Capture/Compare output */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <PWM_voidInit+0x448>)
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <PWM_voidInit+0x448>)
 8001c0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c0e:	f042 0210 	orr.w	r2, r2, #16
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	e00f      	b.n	8001c36 <PWM_voidInit+0x3d2>
    else
    	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCER,4);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <PWM_voidInit+0x448>)
 8001c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <PWM_voidInit+0x448>)
 8001c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c30:	f022 0210 	bic.w	r2, r2, #16
 8001c34:	621a      	str	r2, [r3, #32]

  	if (PWM_Config->CCR3_Status == CCR_ENABLE )
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7a1b      	ldrb	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d110      	bne.n	8001c60 <PWM_voidInit+0x3fc>
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCER,8); /* Enable Capture/Compare output */
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <PWM_voidInit+0x448>)
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <PWM_voidInit+0x448>)
 8001c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c5c:	621a      	str	r2, [r3, #32]
 8001c5e:	e00f      	b.n	8001c80 <PWM_voidInit+0x41c>
    else
    	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCER,8);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <PWM_voidInit+0x448>)
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <PWM_voidInit+0x448>)
 8001c76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7e:	621a      	str	r2, [r3, #32]

  	if (PWM_Config->CCR4_Status == CCR_ENABLE )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7a5b      	ldrb	r3, [r3, #9]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d113      	bne.n	8001cb0 <PWM_voidInit+0x44c>
		SET_BIT(TIMx[PWM_Config->TimerSelect]->CCER,12); /* Enable Capture/Compare output */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <PWM_voidInit+0x448>)
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <PWM_voidInit+0x448>)
 8001c9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ca6:	621a      	str	r2, [r3, #32]
 8001ca8:	e012      	b.n	8001cd0 <PWM_voidInit+0x46c>
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000
    else
    	CLR_BIT(TIMx[PWM_Config->TimerSelect]->CCER,12);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001cc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cce:	621a      	str	r2, [r3, #32]


  /* Initialize all the registers */
  SET_BIT(TIMx[PWM_Config->TimerSelect]->EGR ,0);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001ce6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	615a      	str	r2, [r3, #20]
  /* Enable timer main output */
  SET_BIT(TIMx[PWM_Config->TimerSelect]->BDTR ,15);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001d06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Enable TIMx */
  SET_BIT(TIMx[PWM_Config->TimerSelect]->CR1,0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <PWM_voidInit+0x4d4>)
 8001d26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000000 	.word	0x20000000

08001d3c <PWM_voidUpdate>:



void PWM_voidUpdate(ePWM_TimerSelect_t Timer ,eCCR_Channel_t channel, u8 duty ){
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	460b      	mov	r3, r1
 8001d48:	71bb      	strb	r3, [r7, #6]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	717b      	strb	r3, [r7, #5]
	switch (channel){
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d857      	bhi.n	8001e04 <PWM_voidUpdate+0xc8>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <PWM_voidUpdate+0x20>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d93 	.word	0x08001d93
 8001d64:	08001db9 	.word	0x08001db9
 8001d68:	08001ddf 	.word	0x08001ddf
		case Channel_1:
		TIMx[Timer]->CCR1=map(duty, 0, 100, 0, TIMx[Timer]->ARR);
 8001d6c:	7978      	ldrb	r0, [r7, #5]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4924      	ldr	r1, [pc, #144]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001d7c:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	2100      	movs	r1, #0
 8001d88:	f7fe ffb8 	bl	8000cfc <map>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6363      	str	r3, [r4, #52]	; 0x34
		break ;
 8001d90:	e038      	b.n	8001e04 <PWM_voidUpdate+0xc8>
		case Channel_2:
		TIMx[Timer]->CCR2=map(duty, 0, 100, 0, TIMx[Timer]->ARR);
 8001d92:	7978      	ldrb	r0, [r7, #5]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
 8001da0:	491a      	ldr	r1, [pc, #104]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001da2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2300      	movs	r3, #0
 8001daa:	2264      	movs	r2, #100	; 0x64
 8001dac:	2100      	movs	r1, #0
 8001dae:	f7fe ffa5 	bl	8000cfc <map>
 8001db2:	4603      	mov	r3, r0
 8001db4:	63a3      	str	r3, [r4, #56]	; 0x38
		break ;
 8001db6:	e025      	b.n	8001e04 <PWM_voidUpdate+0xc8>
		case Channel_3:
		TIMx[Timer]->CCR3=map(duty, 0, 100, 0, TIMx[Timer]->ARR);
 8001db8:	7978      	ldrb	r0, [r7, #5]
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	4911      	ldr	r1, [pc, #68]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001dc8:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2264      	movs	r2, #100	; 0x64
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f7fe ff92 	bl	8000cfc <map>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	63e3      	str	r3, [r4, #60]	; 0x3c
		break ;
 8001ddc:	e012      	b.n	8001e04 <PWM_voidUpdate+0xc8>
		case Channel_4:
		TIMx[Timer]->CCR4=map(duty, 0, 100, 0, TIMx[Timer]->ARR);
 8001dde:	7978      	ldrb	r0, [r7, #5]
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <PWM_voidUpdate+0xd0>)
 8001dee:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	2264      	movs	r2, #100	; 0x64
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f7fe ff7f 	bl	8000cfc <map>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6423      	str	r3, [r4, #64]	; 0x40
		break ;
 8001e02:	bf00      	nop
	}

}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	20000000 	.word	0x20000000

08001e10 <USART1_IRQHandler>:

	MUSART1_CallBack = ptr ;

}

void USART1_IRQHandler(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

	MUSART1 -> SR = 0 ;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <USART1_IRQHandler+0x14>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 8001e1a:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <USART1_IRQHandler+0x18>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4798      	blx	r3

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013800 	.word	0x40013800
 8001e28:	20000058 	.word	0x20000058

08001e2c <main>:
// Global variables to control radar operation
u8 radarRunning = 1;  // 1 for running, 0 for stopped
u16 radarSpeed = 50;  // Delay between sweeps, controlling speed

// Main Function
void main(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
    // Initialize peripherals
    MRCC_VidInit();
 8001e32:	f7ff f87b 	bl	8000f2c <MRCC_VidInit>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOA_RCC);
 8001e36:	2102      	movs	r1, #2
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f7ff f88f 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOB_RCC);
 8001e3e:	2103      	movs	r1, #3
 8001e40:	2002      	movs	r0, #2
 8001e42:	f7ff f88b 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, AFIO_RCC);
 8001e46:	2100      	movs	r1, #0
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f7ff f887 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, SPI1_RCC);
 8001e4e:	210c      	movs	r1, #12
 8001e50:	2002      	movs	r0, #2
 8001e52:	f7ff f883 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, TIM1_RCC);
 8001e56:	210b      	movs	r1, #11
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7ff f87f 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB2, TIM8_RCC);
 8001e5e:	210d      	movs	r1, #13
 8001e60:	2002      	movs	r0, #2
 8001e62:	f7ff f87b 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB1, TIM2_RCC);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff f877 	bl	8000f5c <MRCC_VidEnablePeripheralClock>
    MRCC_VidEnablePeripheralClock(RCC_APB1, TIM3_RCC);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7ff f873 	bl	8000f5c <MRCC_VidEnablePeripheralClock>

    /* Pin Initializations */
    MGPIO_VidSetPinDirection(GPIOA, 5, 0b1001);        /* CLK  */
 8001e76:	2209      	movs	r2, #9
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7fe fd66 	bl	800094c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, 7, 0b1001);        /* MOSI  */
 8001e80:	2209      	movs	r2, #9
 8001e82:	2107      	movs	r1, #7
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7fe fd61 	bl	800094c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN0, INPUT_FLOATING);
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7fe fd5c 	bl	800094c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN11, OUT_SPEED_2MHZ_PP);    // RED LED
 8001e94:	2202      	movs	r2, #2
 8001e96:	210b      	movs	r1, #11
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe fd57 	bl	800094c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOB, PIN1, OUT_SPEED_2MHZ_PP);    // GREEN LED
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7fe fd52 	bl	800094c <MGPIO_VidSetPinDirection>
    MGPIO_VidSetPinDirection(GPIOA, PIN8, OUT_SPEED_2MHZ_AFPP);   // PWM
 8001ea8:	220a      	movs	r2, #10
 8001eaa:	2108      	movs	r1, #8
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7fe fd4d 	bl	800094c <MGPIO_VidSetPinDirection>

    MTIMER3_init(PWM_channel_1_IN);
 8001eb2:	2004      	movs	r0, #4
 8001eb4:	f7ff fbb6 	bl	8001624 <MTIMER3_init>
    MTIMER2_init(delay_us);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7ff fb6a 	bl	8001592 <MTIMER2_init>
    HULTRA_attachPin(GPIOA, PIN9, MTIMER3_CH1_PORTA_6);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2109      	movs	r1, #9
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7fe ff36 	bl	8000d34 <HULTRA_attachPin>

    /* Init STK */
    MSTK_voidInit();
 8001ec8:	f7ff f8de 	bl	8001088 <MSTK_voidInit>

    /* SPI Init */
    MSPI1_voidInit();
 8001ecc:	f7ff f886 	bl	8000fdc <MSPI1_voidInit>

    /* TFT Init */
    HTFT_voidInit();
 8001ed0:	f7ff f93c 	bl	800114c <HTFT_voidInit>
    HTFT_voidFillDisplay(TFT_BLACK);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f983 	bl	80011e0 <HTFT_voidFillDisplay>

    /* PWM Configuration */
    sPWM_Confg_t PWM_Confg;
    PWM_Confg.TimerSelect = PWM_TIMER1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	703b      	strb	r3, [r7, #0]
    PWM_Confg.AutoReloadReg = 20000 - 1;
 8001ede:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001ee2:	80bb      	strh	r3, [r7, #4]
    PWM_Confg.Prescaler = 7;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	807b      	strh	r3, [r7, #2]
    PWM_Confg.CCR1_Status = CCR_ENABLE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	71bb      	strb	r3, [r7, #6]
    PWM_Confg.CCR2_Status = CCR_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	71fb      	strb	r3, [r7, #7]
    PWM_Confg.CCR3_Status = CCR_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	723b      	strb	r3, [r7, #8]
    PWM_Confg.CCR4_Status = CCR_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	727b      	strb	r3, [r7, #9]
    PWM_voidInit(&PWM_Confg);
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcb2 	bl	8001864 <PWM_voidInit>

    u16 distance = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	81bb      	strh	r3, [r7, #12]
    u16 angle = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	81fb      	strh	r3, [r7, #14]

    u8 remoteKey = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	72fb      	strb	r3, [r7, #11]

    while (1) {
        // Check for remote key input
        remoteKey = HIR_u8GetPressedKey();
 8001f0c:	f7fe fffc 	bl	8000f08 <HIR_u8GetPressedKey>
 8001f10:	4603      	mov	r3, r0
 8001f12:	72fb      	strb	r3, [r7, #11]
        if (remoteKey != NO_KEY_PRESSED) {
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d003      	beq.n	8001f22 <main+0xf6>
            HandleRemoteKey(remoteKey);
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f891 	bl	8002044 <HandleRemoteKey>
        }

        // If radar is running, perform the sweep
        if (radarRunning) {
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <main+0x210>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <main+0xe0>
            // Sweep from left to right (0 to 180 degrees)
            for (angle = 0; angle <= 180; angle += 2) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	81fb      	strh	r3, [r7, #14]
 8001f2e:	e03d      	b.n	8001fac <main+0x180>
                // Update PWM to move servo faster (fewer delays)
                PWM_voidUpdate(PWM_TIMER1, Channel_1, map(angle, 0, 180, 5, 15));
 8001f30:	89f8      	ldrh	r0, [r7, #14]
 8001f32:	230f      	movs	r3, #15
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2305      	movs	r3, #5
 8001f38:	22b4      	movs	r2, #180	; 0xb4
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f7fe fede 	bl	8000cfc <map>
 8001f40:	4603      	mov	r3, r0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fef7 	bl	8001d3c <PWM_voidUpdate>

                // Trigger ultrasonic sensor and get distance
                HULTRA_Trig(GPIOA, PIN9);
 8001f4e:	2109      	movs	r1, #9
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7fe ff2b 	bl	8000dac <HULTRA_Trig>
                distance = HULTRA_Distance(MTIMER3_CH1_PORTA_6);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe ff46 	bl	8000de8 <HULTRA_Distance>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	81bb      	strh	r3, [r7, #12]

                // Control LEDs based on distance (< 5 cm for Red LED, >= 5 cm for Green LED)
                if (distance < 5) {
 8001f60:	89bb      	ldrh	r3, [r7, #12]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d80a      	bhi.n	8001f7c <main+0x150>
                    MGPIO_VidSetPinValue(GPIOA, PIN11, HIGH); // Red LED ON
 8001f66:	2201      	movs	r2, #1
 8001f68:	210b      	movs	r1, #11
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7fe fdbc 	bl	8000ae8 <MGPIO_VidSetPinValue>
                    MGPIO_VidSetPinValue(GPIOB, PIN1, LOW);  // Green LED OFF
 8001f70:	2200      	movs	r2, #0
 8001f72:	2101      	movs	r1, #1
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7fe fdb7 	bl	8000ae8 <MGPIO_VidSetPinValue>
 8001f7a:	e009      	b.n	8001f90 <main+0x164>
                } else {
                    MGPIO_VidSetPinValue(GPIOA, PIN11, LOW);  // Red LED OFF
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	210b      	movs	r1, #11
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe fdb1 	bl	8000ae8 <MGPIO_VidSetPinValue>
                    MGPIO_VidSetPinValue(GPIOB, PIN1, HIGH); // Green LED ON
 8001f86:	2201      	movs	r2, #1
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7fe fdac 	bl	8000ae8 <MGPIO_VidSetPinValue>
                }

                // Display angle and distance information on TFT
                displayInfo(angle, distance);
 8001f90:	89ba      	ldrh	r2, [r7, #12]
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f88e 	bl	80020b8 <displayInfo>

                // Adjust delay for speed control
                MTIMER3_delay_ms(radarSpeed);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <main+0x214>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fb85 	bl	80016b0 <MTIMER3_delay_ms>
            for (angle = 0; angle <= 180; angle += 2) {
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	81fb      	strh	r3, [r7, #14]
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	2bb4      	cmp	r3, #180	; 0xb4
 8001fb0:	d9be      	bls.n	8001f30 <main+0x104>
            }

            // Sweep from right to left (180 to 0 degrees)
            for (angle = 180; angle > 0; angle -= 2) {
 8001fb2:	23b4      	movs	r3, #180	; 0xb4
 8001fb4:	81fb      	strh	r3, [r7, #14]
 8001fb6:	e03d      	b.n	8002034 <main+0x208>
                // Update PWM to move servo faster
                PWM_voidUpdate(PWM_TIMER1, Channel_1, map(angle, 0, 180, 5, 15));
 8001fb8:	89f8      	ldrh	r0, [r7, #14]
 8001fba:	230f      	movs	r3, #15
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	22b4      	movs	r2, #180	; 0xb4
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f7fe fe9a 	bl	8000cfc <map>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff feb3 	bl	8001d3c <PWM_voidUpdate>

                // Trigger ultrasonic sensor and get distance
                HULTRA_Trig(GPIOA, PIN9);
 8001fd6:	2109      	movs	r1, #9
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe fee7 	bl	8000dac <HULTRA_Trig>
                distance = HULTRA_Distance(MTIMER3_CH1_PORTA_6);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe ff02 	bl	8000de8 <HULTRA_Distance>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	81bb      	strh	r3, [r7, #12]

                // Control LEDs based on distance (< 5 cm for Red LED, >= 5 cm for Green LED)
                if (distance < 5) {
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d80a      	bhi.n	8002004 <main+0x1d8>
                    MGPIO_VidSetPinValue(GPIOA, PIN11, HIGH); // Red LED ON
 8001fee:	2201      	movs	r2, #1
 8001ff0:	210b      	movs	r1, #11
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7fe fd78 	bl	8000ae8 <MGPIO_VidSetPinValue>
                    MGPIO_VidSetPinValue(GPIOB, PIN1, LOW);  // Green LED OFF
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe fd73 	bl	8000ae8 <MGPIO_VidSetPinValue>
 8002002:	e009      	b.n	8002018 <main+0x1ec>
                } else {
                    MGPIO_VidSetPinValue(GPIOA, PIN11, LOW);  // Red LED OFF
 8002004:	2200      	movs	r2, #0
 8002006:	210b      	movs	r1, #11
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fd6d 	bl	8000ae8 <MGPIO_VidSetPinValue>
                    MGPIO_VidSetPinValue(GPIOB, PIN1, HIGH); // Green LED ON
 800200e:	2201      	movs	r2, #1
 8002010:	2101      	movs	r1, #1
 8002012:	2001      	movs	r0, #1
 8002014:	f7fe fd68 	bl	8000ae8 <MGPIO_VidSetPinValue>
                }

                // Display angle and distance information on TFT
                displayInfo(angle, distance);
 8002018:	89ba      	ldrh	r2, [r7, #12]
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f84a 	bl	80020b8 <displayInfo>

                // Adjust delay for speed control
                MTIMER3_delay_ms(radarSpeed);
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <main+0x214>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb41 	bl	80016b0 <MTIMER3_delay_ms>
            for (angle = 180; angle > 0; angle -= 2) {
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	3b02      	subs	r3, #2
 8002032:	81fb      	strh	r3, [r7, #14]
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1be      	bne.n	8001fb8 <main+0x18c>
        remoteKey = HIR_u8GetPressedKey();
 800203a:	e767      	b.n	8001f0c <main+0xe0>
 800203c:	20000008 	.word	0x20000008
 8002040:	2000000a 	.word	0x2000000a

08002044 <HandleRemoteKey>:
        }
    }
}

// Function to handle remote key inputs
void HandleRemoteKey(u8 Copy_u8Key) {
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
    switch (Copy_u8Key) {
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b46      	cmp	r3, #70	; 0x46
 8002052:	d00f      	beq.n	8002074 <HandleRemoteKey+0x30>
 8002054:	2b47      	cmp	r3, #71	; 0x47
 8002056:	d018      	beq.n	800208a <HandleRemoteKey+0x46>
 8002058:	2b45      	cmp	r3, #69	; 0x45
 800205a:	d000      	beq.n	800205e <HandleRemoteKey+0x1a>
            }
            break;

        default:
            // Handle undefined keys
            break;
 800205c:	e023      	b.n	80020a6 <HandleRemoteKey+0x62>
            radarRunning = !radarRunning;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HandleRemoteKey+0x6c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf0c      	ite	eq
 8002066:	2301      	moveq	r3, #1
 8002068:	2300      	movne	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HandleRemoteKey+0x6c>)
 8002070:	701a      	strb	r2, [r3, #0]
            break;
 8002072:	e018      	b.n	80020a6 <HandleRemoteKey+0x62>
            if (radarSpeed > 10) { // Minimum speed limit
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HandleRemoteKey+0x70>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b0a      	cmp	r3, #10
 800207a:	d911      	bls.n	80020a0 <HandleRemoteKey+0x5c>
                radarSpeed -= 10;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HandleRemoteKey+0x70>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	3b0a      	subs	r3, #10
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HandleRemoteKey+0x70>)
 8002086:	801a      	strh	r2, [r3, #0]
            break;
 8002088:	e00a      	b.n	80020a0 <HandleRemoteKey+0x5c>
            if (radarSpeed < 200) { // Maximum speed limit
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HandleRemoteKey+0x70>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2bc7      	cmp	r3, #199	; 0xc7
 8002090:	d808      	bhi.n	80020a4 <HandleRemoteKey+0x60>
                radarSpeed += 10;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HandleRemoteKey+0x70>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	330a      	adds	r3, #10
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HandleRemoteKey+0x70>)
 800209c:	801a      	strh	r2, [r3, #0]
            break;
 800209e:	e001      	b.n	80020a4 <HandleRemoteKey+0x60>
            break;
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <HandleRemoteKey+0x62>
            break;
 80020a4:	bf00      	nop
    }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000008 	.word	0x20000008
 80020b4:	2000000a 	.word	0x2000000a

080020b8 <displayInfo>:


void displayInfo(u16 angle, u16 distance) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	4603      	mov	r3, r0
 80020c0:	460a      	mov	r2, r1
 80020c2:	80fb      	strh	r3, [r7, #6]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80bb      	strh	r3, [r7, #4]
    // Define area coordinates for angle and distance display
    u16 x_start = 10;      // Starting x-coordinate
 80020c8:	230a      	movs	r3, #10
 80020ca:	81fb      	strh	r3, [r7, #14]
    u16 y_angle = 5;       // Y-coordinate for angle
 80020cc:	2305      	movs	r3, #5
 80020ce:	81bb      	strh	r3, [r7, #12]
    u16 y_distance = 20;   // Y-coordinate for distance
 80020d0:	2314      	movs	r3, #20
 80020d2:	817b      	strh	r3, [r7, #10]

    // Display static text for "Angle:" and "Distance:" (This remains unchanged)
    HTFT_voidPrintText((s8*)"Angle:", x_start, y_angle, 1, TFT_WHITE, TFT_BLACK);
 80020d4:	89ba      	ldrh	r2, [r7, #12]
 80020d6:	89f9      	ldrh	r1, [r7, #14]
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2301      	movs	r3, #1
 80020e4:	482c      	ldr	r0, [pc, #176]	; (8002198 <displayInfo+0xe0>)
 80020e6:	f7ff f949 	bl	800137c <HTFT_voidPrintText>
    HTFT_voidPrintText((s8*)"Distance:", x_start, y_distance, 1, TFT_WHITE, TFT_BLACK);
 80020ea:	897a      	ldrh	r2, [r7, #10]
 80020ec:	89f9      	ldrh	r1, [r7, #14]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	4828      	ldr	r0, [pc, #160]	; (800219c <displayInfo+0xe4>)
 80020fc:	f7ff f93e 	bl	800137c <HTFT_voidPrintText>
    // Static variables to hold the last displayed values
    static u16 lastAngle = 0;
    static u16 lastDistance = 0;

    // Check if the angle has changed
    if (angle != lastAngle) {
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <displayInfo+0xe8>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	429a      	cmp	r2, r3
 8002108:	d01e      	beq.n	8002148 <displayInfo+0x90>
        // Clear the previous numeric value of angle
        HTFT_voidDrawRectangle(x_start + 50, y_angle, x_start + 100, y_angle + 10, TFT_BLACK);  // Clear only the number space for angle
 800210a:	89fb      	ldrh	r3, [r7, #14]
 800210c:	3332      	adds	r3, #50	; 0x32
 800210e:	b298      	uxth	r0, r3
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	3364      	adds	r3, #100	; 0x64
 8002114:	b29a      	uxth	r2, r3
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	330a      	adds	r3, #10
 800211a:	b29c      	uxth	r4, r3
 800211c:	89b9      	ldrh	r1, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4623      	mov	r3, r4
 8002124:	f7ff f86d 	bl	8001202 <HTFT_voidDrawRectangle>
        // Display updated angle value
        HTFT_voidprintNumber(angle, x_start + 50, y_angle, 1, TFT_WHITE, TFT_BLACK);  // Update only the angle value
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	3332      	adds	r3, #50	; 0x32
 800212c:	b299      	uxth	r1, r3
 800212e:	89ba      	ldrh	r2, [r7, #12]
 8002130:	88f8      	ldrh	r0, [r7, #6]
 8002132:	2300      	movs	r3, #0
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2301      	movs	r3, #1
 800213e:	f7ff f94e 	bl	80013de <HTFT_voidprintNumber>
        lastAngle = angle;  // Update the last displayed angle
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <displayInfo+0xe8>)
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	8013      	strh	r3, [r2, #0]
    }

    // Check if the distance has changed
    if (distance != lastDistance) {
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <displayInfo+0xec>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	88ba      	ldrh	r2, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d01e      	beq.n	8002190 <displayInfo+0xd8>
        // Clear the previous numeric value of distance
        HTFT_voidDrawRectangle(x_start + 70, y_distance, x_start + 120, y_distance + 10, TFT_BLACK);  // Clear only the number space for distance
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	3346      	adds	r3, #70	; 0x46
 8002156:	b298      	uxth	r0, r3
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	3378      	adds	r3, #120	; 0x78
 800215c:	b29a      	uxth	r2, r3
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	330a      	adds	r3, #10
 8002162:	b29c      	uxth	r4, r3
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	4623      	mov	r3, r4
 800216c:	f7ff f849 	bl	8001202 <HTFT_voidDrawRectangle>
        // Display updated distance value
        HTFT_voidprintNumber(distance, x_start + 70, y_distance, 1, TFT_WHITE, TFT_BLACK);  // Update only the distance value
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	3346      	adds	r3, #70	; 0x46
 8002174:	b299      	uxth	r1, r3
 8002176:	897a      	ldrh	r2, [r7, #10]
 8002178:	88b8      	ldrh	r0, [r7, #4]
 800217a:	2300      	movs	r3, #0
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	f7ff f92a 	bl	80013de <HTFT_voidprintNumber>
        lastDistance = distance;  // Update the last displayed distance
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <displayInfo+0xec>)
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	8013      	strh	r3, [r2, #0]
    }
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	0800225c 	.word	0x0800225c
 800219c:	08002264 	.word	0x08002264
 80021a0:	20000036 	.word	0x20000036
 80021a4:	20000038 	.word	0x20000038

080021a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021b2:	490d      	ldr	r1, [pc, #52]	; (80021e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <LoopForever+0xe>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c8:	4c0a      	ldr	r4, [pc, #40]	; (80021f4 <LoopForever+0x16>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021d6:	f000 f811 	bl	80021fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021da:	f7ff fe27 	bl	8001e2c <main>

080021de <LoopForever>:

LoopForever:
    b LoopForever
 80021de:	e7fe      	b.n	80021de <LoopForever>
  ldr   r0, =_estack
 80021e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021ec:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 80021f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021f4:	2000005c 	.word	0x2000005c

080021f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC1_2_IRQHandler>
	...

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2500      	movs	r5, #0
 8002200:	4e0c      	ldr	r6, [pc, #48]	; (8002234 <__libc_init_array+0x38>)
 8002202:	4c0d      	ldr	r4, [pc, #52]	; (8002238 <__libc_init_array+0x3c>)
 8002204:	1ba4      	subs	r4, r4, r6
 8002206:	10a4      	asrs	r4, r4, #2
 8002208:	42a5      	cmp	r5, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	f000 f81a 	bl	8002244 <_init>
 8002210:	2500      	movs	r5, #0
 8002212:	4e0a      	ldr	r6, [pc, #40]	; (800223c <__libc_init_array+0x40>)
 8002214:	4c0a      	ldr	r4, [pc, #40]	; (8002240 <__libc_init_array+0x44>)
 8002216:	1ba4      	subs	r4, r4, r6
 8002218:	10a4      	asrs	r4, r4, #2
 800221a:	42a5      	cmp	r5, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002224:	4798      	blx	r3
 8002226:	3501      	adds	r5, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800222e:	4798      	blx	r3
 8002230:	3501      	adds	r5, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	080024b0 	.word	0x080024b0
 8002238:	080024b0 	.word	0x080024b0
 800223c:	080024b0 	.word	0x080024b0
 8002240:	080024b4 	.word	0x080024b4

08002244 <_init>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	bf00      	nop
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr

08002250 <_fini>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	bf00      	nop
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr
